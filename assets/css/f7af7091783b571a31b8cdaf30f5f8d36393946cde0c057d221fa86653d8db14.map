{"version":3,"sources":["jsdelivr-header.js","/npm/jquery-match-height@0.7.2/dist/jquery.matchHeight.js"],"names":[],"mappings":"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","file":"/npm/jquery-match-height@0.7.2/dist/jquery.matchHeight.js","sourceRoot":"","sourcesContent":["/**\n * Minified by jsDelivr using Terser v3.14.1.\n * Original file: /npm/jquery-match-height@0.7.2/dist/jquery.matchHeight.js\n * \n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\n","/**\n* jquery-match-height 0.7.2 by @liabru\n* http://brm.io/jquery-match-height/\n* License: MIT\n*/\n\n;(function(factory) { // eslint-disable-line no-extra-semi\n    'use strict';\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery'], factory);\n    } else if (typeof module !== 'undefined' && module.exports) {\n        // CommonJS\n        module.exports = factory(require('jquery'));\n    } else {\n        // Global\n        factory(jQuery);\n    }\n})(function($) {\n    /*\n    *  internal\n    */\n\n    var _previousResizeWidth = -1,\n        _updateTimeout = -1;\n\n    /*\n    *  _parse\n    *  value parse utility function\n    */\n\n    var _parse = function(value) {\n        // parse value and convert NaN to 0\n        return parseFloat(value) || 0;\n    };\n\n    /*\n    *  _rows\n    *  utility function returns array of jQuery selections representing each row\n    *  (as displayed after float wrapping applied by browser)\n    */\n\n    var _rows = function(elements) {\n        var tolerance = 1,\n            $elements = $(elements),\n            lastTop = null,\n            rows = [];\n\n        // group elements by their top position\n        $elements.each(function(){\n            var $that = $(this),\n                top = $that.offset().top - _parse($that.css('margin-top')),\n                lastRow = rows.length > 0 ? rows[rows.length - 1] : null;\n\n            if (lastRow === null) {\n                // first item on the row, so just push it\n                rows.push($that);\n            } else {\n                // if the row top is the same, add to the row group\n                if (Math.floor(Math.abs(lastTop - top)) <= tolerance) {\n                    rows[rows.length - 1] = lastRow.add($that);\n                } else {\n                    // otherwise start a new row group\n                    rows.push($that);\n                }\n            }\n\n            // keep track of the last row top\n            lastTop = top;\n        });\n\n        return rows;\n    };\n\n    /*\n    *  _parseOptions\n    *  handle plugin options\n    */\n\n    var _parseOptions = function(options) {\n        var opts = {\n            byRow: true,\n            property: 'height',\n            target: null,\n            remove: false\n        };\n\n        if (typeof options === 'object') {\n            return $.extend(opts, options);\n        }\n\n        if (typeof options === 'boolean') {\n            opts.byRow = options;\n        } else if (options === 'remove') {\n            opts.remove = true;\n        }\n\n        return opts;\n    };\n\n    /*\n    *  matchHeight\n    *  plugin definition\n    */\n\n    var matchHeight = $.fn.matchHeight = function(options) {\n        var opts = _parseOptions(options);\n\n        // handle remove\n        if (opts.remove) {\n            var that = this;\n\n            // remove fixed height from all selected elements\n            this.css(opts.property, '');\n\n            // remove selected elements from all groups\n            $.each(matchHeight._groups, function(key, group) {\n                group.elements = group.elements.not(that);\n            });\n\n            // TODO: cleanup empty groups\n\n            return this;\n        }\n\n        if (this.length <= 1 && !opts.target) {\n            return this;\n        }\n\n        // keep track of this group so we can re-apply later on load and resize events\n        matchHeight._groups.push({\n            elements: this,\n            options: opts\n        });\n\n        // match each element's height to the tallest element in the selection\n        matchHeight._apply(this, opts);\n\n        return this;\n    };\n\n    /*\n    *  plugin global options\n    */\n\n    matchHeight.version = '0.7.2';\n    matchHeight._groups = [];\n    matchHeight._throttle = 80;\n    matchHeight._maintainScroll = false;\n    matchHeight._beforeUpdate = null;\n    matchHeight._afterUpdate = null;\n    matchHeight._rows = _rows;\n    matchHeight._parse = _parse;\n    matchHeight._parseOptions = _parseOptions;\n\n    /*\n    *  matchHeight._apply\n    *  apply matchHeight to given elements\n    */\n\n    matchHeight._apply = function(elements, options) {\n        var opts = _parseOptions(options),\n            $elements = $(elements),\n            rows = [$elements];\n\n        // take note of scroll position\n        var scrollTop = $(window).scrollTop(),\n            htmlHeight = $('html').outerHeight(true);\n\n        // get hidden parents\n        var $hiddenParents = $elements.parents().filter(':hidden');\n\n        // cache the original inline style\n        $hiddenParents.each(function() {\n            var $that = $(this);\n            $that.data('style-cache', $that.attr('style'));\n        });\n\n        // temporarily must force hidden parents visible\n        $hiddenParents.css('display', 'block');\n\n        // get rows if using byRow, otherwise assume one row\n        if (opts.byRow && !opts.target) {\n\n            // must first force an arbitrary equal height so floating elements break evenly\n            $elements.each(function() {\n                var $that = $(this),\n                    display = $that.css('display');\n\n                // temporarily force a usable display value\n                if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {\n                    display = 'block';\n                }\n\n                // cache the original inline style\n                $that.data('style-cache', $that.attr('style'));\n\n                $that.css({\n                    'display': display,\n                    'padding-top': '0',\n                    'padding-bottom': '0',\n                    'margin-top': '0',\n                    'margin-bottom': '0',\n                    'border-top-width': '0',\n                    'border-bottom-width': '0',\n                    'height': '100px',\n                    'overflow': 'hidden'\n                });\n            });\n\n            // get the array of rows (based on element top position)\n            rows = _rows($elements);\n\n            // revert original inline styles\n            $elements.each(function() {\n                var $that = $(this);\n                $that.attr('style', $that.data('style-cache') || '');\n            });\n        }\n\n        $.each(rows, function(key, row) {\n            var $row = $(row),\n                targetHeight = 0;\n\n            if (!opts.target) {\n                // skip apply to rows with only one item\n                if (opts.byRow && $row.length <= 1) {\n                    $row.css(opts.property, '');\n                    return;\n                }\n\n                // iterate the row and find the max height\n                $row.each(function(){\n                    var $that = $(this),\n                        style = $that.attr('style'),\n                        display = $that.css('display');\n\n                    // temporarily force a usable display value\n                    if (display !== 'inline-block' && display !== 'flex' && display !== 'inline-flex') {\n                        display = 'block';\n                    }\n\n                    // ensure we get the correct actual height (and not a previously set height value)\n                    var css = { 'display': display };\n                    css[opts.property] = '';\n                    $that.css(css);\n\n                    // find the max height (including padding, but not margin)\n                    if ($that.outerHeight(false) > targetHeight) {\n                        targetHeight = $that.outerHeight(false);\n                    }\n\n                    // revert styles\n                    if (style) {\n                        $that.attr('style', style);\n                    } else {\n                        $that.css('display', '');\n                    }\n                });\n            } else {\n                // if target set, use the height of the target element\n                targetHeight = opts.target.outerHeight(false);\n            }\n\n            // iterate the row and apply the height to all elements\n            $row.each(function(){\n                var $that = $(this),\n                    verticalPadding = 0;\n\n                // don't apply to a target\n                if (opts.target && $that.is(opts.target)) {\n                    return;\n                }\n\n                // handle padding and border correctly (required when not using border-box)\n                if ($that.css('box-sizing') !== 'border-box') {\n                    verticalPadding += _parse($that.css('border-top-width')) + _parse($that.css('border-bottom-width'));\n                    verticalPadding += _parse($that.css('padding-top')) + _parse($that.css('padding-bottom'));\n                }\n\n                // set the height (accounting for padding and border)\n                $that.css(opts.property, (targetHeight - verticalPadding) + 'px');\n            });\n        });\n\n        // revert hidden parents\n        $hiddenParents.each(function() {\n            var $that = $(this);\n            $that.attr('style', $that.data('style-cache') || null);\n        });\n\n        // restore scroll position if enabled\n        if (matchHeight._maintainScroll) {\n            $(window).scrollTop((scrollTop / htmlHeight) * $('html').outerHeight(true));\n        }\n\n        return this;\n    };\n\n    /*\n    *  matchHeight._applyDataApi\n    *  applies matchHeight to all elements with a data-match-height attribute\n    */\n\n    matchHeight._applyDataApi = function() {\n        var groups = {};\n\n        // generate groups by their groupId set by elements using data-match-height\n        $('[data-match-height], [data-mh]').each(function() {\n            var $this = $(this),\n                groupId = $this.attr('data-mh') || $this.attr('data-match-height');\n\n            if (groupId in groups) {\n                groups[groupId] = groups[groupId].add($this);\n            } else {\n                groups[groupId] = $this;\n            }\n        });\n\n        // apply matchHeight to each group\n        $.each(groups, function() {\n            this.matchHeight(true);\n        });\n    };\n\n    /*\n    *  matchHeight._update\n    *  updates matchHeight on all current groups with their correct options\n    */\n\n    var _update = function(event) {\n        if (matchHeight._beforeUpdate) {\n            matchHeight._beforeUpdate(event, matchHeight._groups);\n        }\n\n        $.each(matchHeight._groups, function() {\n            matchHeight._apply(this.elements, this.options);\n        });\n\n        if (matchHeight._afterUpdate) {\n            matchHeight._afterUpdate(event, matchHeight._groups);\n        }\n    };\n\n    matchHeight._update = function(throttle, event) {\n        // prevent update if fired from a resize event\n        // where the viewport width hasn't actually changed\n        // fixes an event looping bug in IE8\n        if (event && event.type === 'resize') {\n            var windowWidth = $(window).width();\n            if (windowWidth === _previousResizeWidth) {\n                return;\n            }\n            _previousResizeWidth = windowWidth;\n        }\n\n        // throttle updates\n        if (!throttle) {\n            _update(event);\n        } else if (_updateTimeout === -1) {\n            _updateTimeout = setTimeout(function() {\n                _update(event);\n                _updateTimeout = -1;\n            }, matchHeight._throttle);\n        }\n    };\n\n    /*\n    *  bind events\n    */\n\n    // apply on DOM ready event\n    $(matchHeight._applyDataApi);\n\n    // use on or bind where supported\n    var on = $.fn.on ? 'on' : 'bind';\n\n    // update heights on load and resize events\n    $(window)[on]('load', function(event) {\n        matchHeight._update(false, event);\n    });\n\n    // throttled update heights on resize events\n    $(window)[on]('resize orientationchange', function(event) {\n        matchHeight._update(true, event);\n    });\n\n});\n"]}